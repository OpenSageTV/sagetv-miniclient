apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services' // Google services Gradle plugin

// Apply the Crashlytics Gradle plugin
apply plugin: 'com.google.firebase.crashlytics'

def computeVersionCode()
{
    return appVersionCode
}

Properties signingProps = new Properties()
def propFile = file("../keystore.properties")

if (propFile.canRead())
{
    signingProps.load(new FileInputStream(propFile))
}
else
{
    System.out.println("Keystore properties file missing. Expceted path:" + propFile.path)
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    android {
    compileOptions {
            sourceCompatibility 1.8
            targetCompatibility 1.8
        }
    }


    defaultConfig {

        applicationId "jvl.sage.miniclient.android.tv.debug"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        // versionCode API (2 digits), SCREEN (2 digits), VERSION (3 digits)
        versionCode computeVersionCode()
        versionName "${appVersionName}"
        ndk.abiFilters 'armeabi-v7a','arm64-v8a','armeabi','x86','x86_64'
    }

    signingConfigs
    {
        release
        {
            keyAlias = "client"

            if (signingProps!=null && signingProps.containsKey("keyAlias") && signingProps.containsKey("storeFile")
                    && signingProps.containsKey("storePassword") && signingProps.containsKey("keyPassword"))
            {
                keyAlias = signingProps.getProperty("keyAlias")
                storeFile = new File(signingProps.getProperty("storeFile"))
                storePassword = signingProps.getProperty("storePassword")
                keyPassword = signingProps.getProperty("keyPassword")

                System.out.println("signing config setup from properties file")
            }
            else
            {
                try
                {


                    storeFile = file(project.getProperty("keystore"))
                    storePassword = project.getProperty("storePass")
                    keyAlias = project.getProperty("alias")
                    keyPassword = project.getProperty("keyPass")

                    System.out.println("signing config missing or incorrectly configured.  Using command line params")
                }
                catch (Exception ex){}
            }
        }
        debug
        {
            keyAlias = "client"

            if (signingProps!=null && signingProps.containsKey("keyAlias") && signingProps.containsKey("storeFile")
                    && signingProps.containsKey("storePassword") && signingProps.containsKey("keyPassword"))
            {
                keyAlias = signingProps.getProperty("keyAlias")
                storeFile = new File(signingProps.getProperty("storeFile"))
                storePassword = signingProps.getProperty("storePassword")
                keyPassword = signingProps.getProperty("keyPassword")

                System.out.println("signing config setup from properties file")
            }
            else
            {
                try
                {
                    storeFile = file(project.getProperty("keystore"))
                    storePassword = project.getProperty("storePass")
                    keyAlias = project.getProperty("alias")
                    keyPassword = project.getProperty("keyPass")

                    System.out.println("signing config missing or incorrectly configured.  Using command line params")
                }
                catch (Exception ex){}
            }
        }
    }

    buildTypes
    {
        release
        {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            resValue "string", "app_name", "@string/app_name_release"
        }
        debug
        {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            debuggable true

            //Identify the application as debug, and allow it to be installed along side production
            applicationIdSuffix = ".debug"
            versionNameSuffix = "-DEBUG"
            resValue "string", "app_name", "@string/app_name_debug"
        }
    }
}



dependencies {

    api project(":android-shared")
    api fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.appcompat:appcompat:1.3.1"
    implementation "androidx.leanback:leanback:1.0.0"
    api "com.github.bumptech.glide:glide:3.8.0"

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:30.0.0')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'


}

clean {
    delete '../build', 'android-phone-release.apk', 'android-tv-release.apk'
}