def getBuildType() {

    if(env.GIT_BRANCH.endsWith("/master"))
    {
        return "release"
    }
    else if(env.GIT_BRANCH.endsWith("/beta"))
    {
        return "release"
    }
    else if(env.GIT_BRANCH.endsWith("/ExoPlayer_2.16.1_upgrade"))
    {
        return "release"
    }
    else
    {
        return "debug"
    }
}

def getBranch() {

    if(env.GIT_BRANCH.split("/").length > 1)
    {
        return env.GIT_BRANCH.split("/")[1];
    }
    else
    {
        return env.GIT_BRANCH;
    }
}

pipeline {
    agent {
        dockerfile {
            dir 'pipeline'
        }
    }

    parameters {
        booleanParam(name: 'GOOGLE_DEPLOY_ALPHA', defaultValue: false, description: 'Deploy to Google Play Store closed beta test track')
    }

    environment {
        appName = 'SageTV Android Client'

        KEY_PASSWORD = credentials('keyPassword')
        KEY_ALIAS = credentials('keyAlias')
        KEYSTORE = credentials('keystoreFile')
        STORE_PASSWORD = credentials('storePassword')
        GIT_HUB_USER = credentials('GitHubUser')
        GIT_HUB_TOKEN = credentials('GitHubToken')

        version = sh (script: "./gradlew properties -q | grep \"baseVersion:\" | awk '{print \$2}'", returnStdout: true).trim()
        appversioncode = sh (script: "./gradlew properties -q | grep \"appVersionCode:\" | awk '{print \$2}'", returnStdout: true).trim()
        exoversion = sh (script: "./gradlew properties -q | grep \"exoVersion:\" | awk '{print \$2}'", returnStdout: true).trim()
        exoversioncustomext = sh (script: "./gradlew properties -q | grep \"exoVersionCustomExt:\" | awk '{print \$2}'", returnStdout: true).trim()
        ijkversion = sh (script: "./gradlew properties -q | grep \"ijkVersionDev:\" | awk '{print \$2}'", returnStdout: true).trim()
        VARIANT = "debug"
    }

    stages {

        stage('Set build informaction') {
                steps {
                    script {
                        VARIANT = getBuildType()

                        currentBuild.displayName = "${version}"
                        currentBuild.description = "<B>Build Type:</B> ${VARIANT}<BR>\n"
                        currentBuild.description += "<B>Version:</B> ${version}<BR>\n"
                        currentBuild.description += "<B>Application Version Code:</B> ${appversioncode}<BR>\n"
                        currentBuild.description += "<B>ExoPlayer Version:</B> ${exoversion}<BR>\n"
                        currentBuild.description += "<B>ExoPlayer FFmpeg Ext Version:</B> ${exoversioncustomext}<BR>\n"
                        currentBuild.description += "<B>IJKPlayer Version:</B> ${ijkversion}<BR>\n"
                    }
                }
            }

        stage('Build Bundle') {
            steps {
                script {
                    sh "./gradlew -PstorePass=${STORE_PASSWORD} -Pkeystore=\"${KEYSTORE}\" -Palias=${KEY_ALIAS} -PkeyPass=${KEY_PASSWORD} bundle${VARIANT}"
                    sh "./gradlew -PstorePass=${STORE_PASSWORD} -Pkeystore=\"${KEYSTORE}\" -Palias=${KEY_ALIAS} -PkeyPass=${KEY_PASSWORD} assemble${VARIANT}"
                    sh 'echo "Check to see if there is any outputs"'
                    sh "ls android-tv/build/outputs/bundle/${VARIANT}"
                    sh "ls android-tv/build/outputs/apk/${VARIANT}"
                }
            }
        }

        stage('Publish local') {
             steps {
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "android-tv/build/outputs/bundle/${VARIANT}", sourceFiles: "android-tv/build/outputs/bundle/${VARIANT}/*.aab"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "android-tv/build/outputs/apk/${VARIANT}", sourceFiles: "android-tv/build/outputs/apk/${VARIANT}/*.apk"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
             }
        }

        stage('Publish to GitHub') {
            steps {

                script {
                    BRANCH = getBranch()

                    echo "Test creating tag"
                    sh('git remote set-url origin https://${GIT_HUB_TOKEN}@github.com/OpenSageTV/sagetv-miniclient.git')
                    sh('git config --global user.email "josh@joshandmonique.com"')
                    sh('git config --global user.name "Joshua Lewis"')

                    //Delete the tag remote an local incase it already exists
                    sh("git tag -d v${version} || exit 0")
                    sh("git push --delete origin v${version} || exit 0")

                    sh("git tag v${version}")
                    sh("git push origin v${version}")

                    //sh('printenv')
                    //sh('ls /root')
                    //sh('ls /root/go/bin')
                    //sh('PATH=/root/go/bin:$PATH')
                    //sh('github-release --help')

                    try
                    {
                        CHANGELOG = readFile(file: 'pipeline/releasechangelist')
                    }
                    catch (err)
                    {
                        echo "Issue reading pipeline/releasechangelist file: ${err.localizedMessage}"
                        CHANGELOG = ''
                    }

                    sh("export GITHUB_TOKEN=${GIT_HUB_TOKEN}")
                    sh("github-release delete --user OpenSageTV --repo sagetv-miniclient || exit 0")
                    sh("github-release release --user OpenSageTV --repo sagetv-miniclient --tag v${version} --name \"Automated release for v${version}\" --description \"${CHANGELOG}\"")
                }
            }


            /*
            # set your token
            export GITHUB_TOKEN=...

            # check the help
            $ github-release --help

            # make your tag and upload
            $ git tag ... && git push --tags

            # check the current tags and existing releases of the repo
            $ github-release info -u aktau -r gofinance
            git tags:
            - v0.1.0 (commit: https://api.github.com/repos/aktau/gofinance/commits/f562727ce83ce8971a8569a1879219e41d56a756)
            releases:
            - v0.1.0, name: 'hoary ungar', description: 'something something dark side 2', id: 166740, tagged: 29/01/2014 at 14:27, published: 30/01/2014 at 16:20, draft: ✔, prerelease: ✗
              - artifact: github.go, downloads: 0, state: uploaded, type: application/octet-stream, size: 1.9KB, id: 68616

            # create a formal release
            $ github-release release \
                --user aktau \
                --repo gofinance \
                --tag v0.1.0 \
                --name "the wolf of source street" \
                --description "Not a movie, contrary to popular opinion. Still, my first release!" \
                --pre-release

            # you've made a mistake, but you can edit the release without
            # having to delete it first (this also means you can edit without having
            # to upload your files again)
            $ github-release edit \
                --user aktau \
                --repo gofinance \
                --tag v0.1.0 \
                --name "Highlander II: The Quickening" \
                --description "This is the actual description!"

            # upload a file, for example the OSX/AMD64 binary of my gofinance app
            $ github-release upload \
                --user aktau \
                --repo gofinance \
                --tag v0.1.0 \
                --name "gofinance-osx-amd64" \
                --file bin/darwin/amd64/gofinance

            # upload other files...
            $ github-release upload ...

            # you're not happy with it, so delete it
            $ github-release delete \
                --user aktau \
                --repo gofinance \
                --tag v0.1.0
            */

        }


        stage('Publish to Play Store') {
            when { expression { params.GOOGLE_DEPLOY_ALPHA } }
            steps {
                script {

                    try
                    {
                        CHANGELOG = readFile(file: 'pipeline/releasechangelist')
                    }
                    catch (err)
                    {
                        echo "Issue reading pipeline/releasechangelist file: ${err.localizedMessage}"
                        CHANGELOG = ''
                    }

                    androidApkUpload googleCredentialsId: 'Google Play API Access', apkFilesPattern: 'android-tv/build/outputs/bundle/release/*-release.aab', trackName: 'Beta Release Track', rolloutPercentage: "100%", recentChangeList: [[language: 'en-US', text: CHANGELOG]]

                }


            }
        }
        
    }
}