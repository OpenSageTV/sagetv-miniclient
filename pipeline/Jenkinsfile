def getBranch()
{
    if(env.GIT_BRANCH.split("/").length > 1)
    {
        return env.GIT_BRANCH.split("/")[1];
    }
    else
    {
        return env.GIT_BRANCH;
    }
}

def getBuildType()
{
    switch (getBranch())
    {
        case "master":

            return "release"

        case "beta":

            return "release"

        case "alpha":

            return "debug"

        case "amazon_publish": //This is for amazon app publish development/debugging

            return "release"

        default:

            return "debug"

    }
}

def getReleaseToGit()
{
    switch (getBranch())
    {
        case "master":

            return true

        case "beta":

            return false

        case "alpha":

            return false

        default:

            return false

    }
}

def getReleaseToClients()
{
    switch (getBranch())
    {
        case "master":

            return false

        case "beta":

            return false

        case "alpha":

            return true

        case "dev":

            return true

        default:

            return false

    }
}

def getReleaseToGooglePlay()
{
    switch (getBranch())
    {
        case "master":

            return true

        case "beta":

            return true

        case "alpha":

            return false

        default:

            return false

    }
}

def getReleaseToAmazonAppStore()
{
    switch (getBranch())
    {
        case "master":

            return true

        case "beta":

            return true

        case "alpha":

            return false

        case "amazon_publish": //This is for amazon app publish development/debugging

            return true

        default:

            return false

    }
}

pipeline
{
    agent
    {
        dockerfile
        {
            dir 'pipeline'
        }
    }

    /*
    parameters
    {
        booleanParam(name: 'GOOGLE_DEPLOY_ALPHA', defaultValue: false, description: 'Deploy to Google Play Store closed beta test track')
    }
    */

    environment
    {
        appName = 'SageTV Android Client'

        KEY_PASSWORD = credentials('keyPassword')
        KEY_ALIAS = credentials('keyAlias')
        KEYSTORE = credentials('keystoreFile')
        STORE_PASSWORD = credentials('storePassword')
        GIT_HUB_USER = credentials('GitHubUser')
        GIT_HUB_TOKEN = credentials('GitHubToken')
        AMAZON_APP_ID = credentials('SageTVAndroidClient-AmazonAppID')
        AMAZON_CLIENT_ID = credentials('SageTVAndroidClient-AmazonClientID')
        AMAZON_CLIENT_SECRET = credentials('SageTVAndroidClient-AmazonClientSecret')
        ADB_VENDOR_KEYS="/adbkeys"

        version = sh (script: "./gradlew properties -q | grep \"appVersionName:\" | awk '{print \$2}'", returnStdout: true).trim()
        appversioncode = sh (script: "./gradlew properties -q | grep \"appVersionCode:\" | awk '{print \$2}'", returnStdout: true).trim()
        exoversion = sh (script: "./gradlew properties -q | grep \"exoVersion:\" | awk '{print \$2}'", returnStdout: true).trim()
        exoversioncustomext = sh (script: "./gradlew properties -q | grep \"exoVersionCustomExt:\" | awk '{print \$2}'", returnStdout: true).trim()
        ijkversion = sh (script: "./gradlew properties -q | grep \"ijkVersionDev:\" | awk '{print \$2}'", returnStdout: true).trim()
        VARIANT = "debug"
    }

    stages
    {



        stage('Set build informaction')
        {
            steps
            {
                script
                {
                    VARIANT = getBuildType()

                    currentBuild.displayName = "${version}"
                    currentBuild.description = "<B>Build Type:</B> ${VARIANT}<BR>\n"
                    currentBuild.description += "<B>Version:</B> ${version}<BR>\n"
                    currentBuild.description += "<B>Application Version Code:</B> ${appversioncode}<BR>\n"
                    currentBuild.description += "<B>ExoPlayer Version:</B> ${exoversion}<BR>\n"
                    currentBuild.description += "<B>ExoPlayer FFmpeg Ext Version:</B> ${exoversioncustomext}<BR>\n"
                    currentBuild.description += "<B>IJKPlayer Version:</B> ${ijkversion}<BR>\n"
                }
            }
        }

        stage('Build Bundle')
        {
            steps
            {
                script
                {
                    sh "./gradlew -PstorePass=${STORE_PASSWORD} -Pkeystore=\"${KEYSTORE}\" -Palias=${KEY_ALIAS} -PkeyPass=${KEY_PASSWORD} bundle${VARIANT}"
                    sh "./gradlew -PstorePass=${STORE_PASSWORD} -Pkeystore=\"${KEYSTORE}\" -Palias=${KEY_ALIAS} -PkeyPass=${KEY_PASSWORD} assemble${VARIANT}"

                    archiveArtifacts artifacts: "android-tv/build/outputs/apk/${VARIANT}/android-tv-${VARIANT}.apk", onlyIfSuccessful: true
                }
            }
        }

        /*
        stage('Publish local')
        {
             steps
             {
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "android-tv/build/outputs/bundle/${VARIANT}", sourceFiles: "android-tv/build/outputs/bundle/${VARIANT}/*.aab"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasechangelist*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasename*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])

                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "android-tv/build/outputs/apk/${VARIANT}", sourceFiles: "android-tv/build/outputs/apk/${VARIANT}/*.apk"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasechangelist*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
                cifsPublisher(publishers: [[configName: 'SageTVAndroidClient', transfers: [[cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "builds/${version}/${VARIANT}", remoteDirectorySDF: false, removePrefix: "pipeline", sourceFiles: "pipeline/releasename*"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]])
             }
        }
        */

        stage('Deploy to internal clients')
        {
            when { expression { return getReleaseToClients() } }
            steps
            {
                //Need to make sure the dir exists before copying the file

                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS')
                {
                    sh "mkdir ${ADB_VENDOR_KEYS}"
                    sh "mkdir /root/.android"
                }

                withCredentials([file(credentialsId: 'Global-ADBPrivateFingerprintKey', variable: 'my_private_key')])
                {
                        //writeFile file: ADB_VENDOR_KEYS, text: readFile(my_private_key)
                        sh "cp ${my_private_key} ${ADB_VENDOR_KEYS}"
                }

                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS')
                {
                    sh "cp ${ADB_VENDOR_KEYS}/* /root/.android/"
                }

                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE', message: 'Error deploying to dev1.androidtv')
                {
                    script
                    {
                        sh "adb disconnect"

                        adbResponse = sh( script: "adb connect dev1.androidtv", returnStdout: true ).trim()

                        if(adbResponse.contains("connected to"))
                        {
                            sh "adb uninstall jvl.sage.miniclient.android.tv.debug.debug"
                            sh "adb install android-tv/build/outputs/apk/debug/android-tv-debug.apk"
                        }
                        else
                        {
                            echo "Connect response: ${adbResponse}"
                            error "Did not connect to client"
                        }
                    }
                }

                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE', message: 'Error deploying to masterbedroom.androidtv')
                {
                    script
                    {
                        sh "adb disconnect"

                        adbResponse = sh( script: "adb connect masterbedroom.androidtv", returnStdout: true ).trim()

                        if(adbResponse.contains("connected to"))
                        {
                            sh "adb uninstall jvl.sage.miniclient.android.tv.debug.debug"
                            sh "adb install android-tv/build/outputs/apk/debug/android-tv-debug.apk"
                        }
                        else
                        {
                            echo "Connect response: ${adbResponse}"
                            error "Did not connect to client"
                        }
                    }
                }

                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE', message: 'Error deploying to firetv')
                {
                    script
                    {
                        sh "adb disconnect"

                        adbResponse = sh( script: "adb connect 192.168.0.191", returnStdout: true ).trim()

                        if(adbResponse.contains("connected to"))
                        {
                            sh "adb uninstall jvl.sage.miniclient.android.tv.debug.debug"
                            sh "adb install android-tv/build/outputs/apk/debug/android-tv-debug.apk"
                        }
                        else
                        {
                            echo "Connect response: ${adbResponse}"
                            error "Did not connect to client"
                        }
                    }
                }
            }
        }

        stage('Publish to GitHub')
        {
            when { expression { return getReleaseToGit() } }
            steps
            {
                script
                {
                    BRANCH = getBranch()

                    sh('git remote set-url origin https://${GIT_HUB_TOKEN}@github.com/OpenSageTV/sagetv-miniclient.git')
                    sh('git config --global user.email "josh@joshandmonique.com"')
                    sh('git config --global user.name "Joshua Lewis"')

                    //Delete the tag remote an local incase it already exists
                    sh("git tag -d v${version} || exit 0")
                    sh("git push --delete origin v${version} || exit 0")

                    sh("git tag v${version}")
                    sh("git push origin v${version}")

                    try
                    {
                        CHANGELOG = readFile(file: 'pipeline/releasechangelist')
                    }
                    catch (err)
                    {
                        echo "Issue reading pipeline/releasechangelist file: ${err.localizedMessage}"
                        CHANGELOG = ''
                    }

                    try
                    {
                        RELEASENAME = readFile(file: 'pipeline/releasename')
                    }
                    catch (err)
                    {
                        echo "Issue reading pipeline/releasename file: ${err.localizedMessage}"
                        RELEASENAME = ''
                    }

                    sh("github-release delete --user OpenSageTV --repo \"sagetv-miniclient\" --tag v${version} -s ${GIT_HUB_TOKEN} || exit 0")
                    sh("github-release release -s ${GIT_HUB_TOKEN} --user OpenSageTV --repo \"sagetv-miniclient\" --tag \"v${version}\" --name \"${RELEASENAME}\" --description \"${CHANGELOG}\"")
                    sh("sleep 5s")
                    //Add apk to the release
                    sh("github-release upload -s ${GIT_HUB_TOKEN} --user OpenSageTV --repo \"sagetv-miniclient\" --tag \"v${version}\" --name \"SageTVAndroidClient_${version}.apk\" --file \"android-tv/build/outputs/apk/${VARIANT}/android-tv-release.apk\"")
                }
            }
        }

        stage('Publish to Play Store')
        {
            when { expression { return getReleaseToGooglePlay() } }
            steps
            {
                script
                {
                    try
                    {
                        CHANGELOG = readFile(file: 'pipeline/releasechangelist')
                    }
                    catch (err)
                    {
                        echo "Issue reading pipeline/releasechangelist file: ${err.localizedMessage}"
                        CHANGELOG = ''
                    }

                    androidApkUpload googleCredentialsId: 'Google Play API Access', apkFilesPattern: 'android-tv/build/outputs/bundle/release/*-release.aab', trackName: 'Beta Release Track', rolloutPercentage: "100%", recentChangeList: [[language: 'en-US', text: CHANGELOG]]
                }
            }
        }

        stage('Publish to Amazon App Store')
        {
            when { expression { return getReleaseToAmazonAppStore() } }
            steps
            {
                script
                {
                    try
                    {
                        CHANGELOG = readFile(file: 'pipeline/releasechangelist')
                    }
                    catch (err)
                    {
                        echo "Issue reading pipeline/releasechangelist file: ${err.localizedMessage}"
                        CHANGELOG = ''
                    }

                    sh("./pipeline/amazon_publish.sh ${AMAZON_APP_ID} android-tv/build/outputs/apk/${VARIANT}/android-tv-release.apk ${AMAZON_CLIENT_ID} ${AMAZON_CLIENT_SECRET} pipeline/releasechangelist")
                    //androidApkUpload googleCredentialsId: 'Google Play API Access', apkFilesPattern: 'android-tv/build/outputs/bundle/release/*-release.aab', trackName: 'Beta Release Track', rolloutPercentage: "100%", recentChangeList: [[language: 'en-US', text: CHANGELOG]]
                }
            }
        }

    }
}